package es.hkapps.eventus.model;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class UserHelper extends SQLiteOpenHelper {

	private static String DB_NAME = "filename.db";
	private static String TABLE_NAME = "usuarios";

	private static String TABLE_CREATE = "CREATE TABLE " + TABLE_NAME + "("
			+ "id INTEGER  NOT NULL AUTO_INCREMENT,"
			+ "firstname` VARCHAR(100)," + "lastname VARCHAR(100),"
			+ "email VARCHAR(100)," + "username VARCHAR(100),"
			+ "token VARCHAR(255)," + "PRIMARY KEY (`id`)" + ")";
	
	private static String[] TABLE_FIELDS = {"id","firstname","lastname","email","username","token"};

	public UserHelper(Context context) {
		super(context, DB_NAME, null, 1);
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		// Se ejecuta la sentencia SQL de creaci칩n de la tabla
		db.execSQL(TABLE_CREATE);
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int versionAnterior,
			int versionNueva) {

		// Se elimina la versi칩n anterior de la tabla
		db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);

		// Se crea la nueva versi칩n de la tabla
		db.execSQL(TABLE_CREATE);
	}

	public boolean save(User user){
		
		return true;
	}
	
	public User retrieveUserByUsername(String username){
		SQLiteDatabase db = this.getReadableDatabase();
		
		String[] args = new String[] {username};
		 
		Cursor c = db.query("Usuarios", TABLE_FIELDS, TABLE_FIELDS[4]+"=?", args, null, null, null);
		 
		//Nos aseguramos de que existe al menos un registro
		if (c.moveToFirst()) {
			User user = new User();
			user.setUsername(c.getString(4));
			user.setToken(c.getString(5));
			user.setNombre(c.getString(1));
			user.setApellidos(c.getString(2))
			user.setEmail(c.getString(3));
			
			user.setId(c.getInt(0));
		     //Recorremos el cursor hasta que no haya m치s registros
		     //do {
		          String codigo= c.getString(0);
		          String nombre = c.getString(1);
		     //} while(c.moveToNext());
		}
		
		return null;
	}
	
	// Getting single Translate
    Translate getTranslate(int id) {
        SQLiteDatabase db = this.getReadableDatabase();

        Cursor cursor = db.query(TABLE_TRANSLATOR, new String[] { KEY_ID,
                KEY_ENGLISHNAME, KEY_URDUNAME }, KEY_ID + "=?",
                new String[] { String.valueOf(id) }, null, null, null, null);
        if (cursor != null)
            cursor.moveToFirst();

        Translate Translate = new Translate(Integer.parseInt
               (cursor.getString(0)),cursor.getString(1), cursor.getString(2));
        // return Translate
        return Translate;
    }
	
	private long insertUser(User user) {
		ContentValues newValues = new ContentValues();
		newValues.put("id", user.getId());
		newValues.put("username", user.getUsername());
		newValues.put("token", user.getToken());
		newValues.put("firstname", user.getNombre());
		newValues.put("lastname", user.getApellidos());
		newValues.put("email", user.getEmail());
		return this.getWritableDatabase().insert(TABLE_NAME, null, newValues);
	}

	private boolean removeUser(User user) {
		return this.getWritableDatabase().delete(TABLE_NAME,
				"id" + "=" + user.getId(), null) > 0;
	}

	private boolean updateUser(User user) {
		ContentValues newValues = new ContentValues();
		newValues.put("id", user.getId());
		newValues.put("username", user.getUsername());
		newValues.put("token", user.getToken());
		newValues.put("firstname", user.getNombre());
		newValues.put("lastname", user.getApellidos());
		newValues.put("email", user.getEmail());
		return this.getWritableDatabase().update(TABLE_NAME, newValues, "id" + "=" + user.getId(),
				null) > 0;
	}

}