package es.hkapps.eventus.model;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;

public class UserHelper extends SQLiteOpenHelper {

	// Ruta por defecto de las bases de datos en el sistema Android
	private static String DB_PATH = "/data/data/TU_PAQUETE/databases/";

	private static String DB_NAME = "filename.db";

	private static String TABLE_NAME = "usuarios";

	private static String DB_CREATE = "CREATE TABLE " + TABLE_NAME + "("
			+ "id INTEGER  NOT NULL AUTO_INCREMENT,"
			+ "user_id INTEGER  NOT NULL," + "firstname` VARCHAR(100),"
			+ "lastname` VARCHAR(100)," + "email VARCHAR(100),"
			+ "PRIMARY KEY (`id`)," + ")";

	public UserHelper(Context context) {
		super(context, DB_NAME, null, 1);
		// TODO Auto-generated constructor stub
	}

	// Sentencia SQL para crear la tabla de Usuarios
	String sqlCreate = "CREATE TABLE Usuarios (codigo INTEGER, nombre TEXT)";

	@Override
	public void onCreate(SQLiteDatabase db) {
		// Se ejecuta la sentencia SQL de creación de la tabla
		db.execSQL(sqlCreate);
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int versionAnterior,
			int versionNueva) {
		// NOTA: Por simplicidad del ejemplo aquí utilizamos directamente la
		// opción de
		// eliminar la tabla anterior y crearla de nuevo vacía con el nuevo
		// formato.
		// Sin embargo lo normal será que haya que migrar datos de la tabla
		// antigua
		// a la nueva, por lo que este método debería ser más elaborado.

		// Se elimina la versión anterior de la tabla
		db.execSQL("DROP TABLE IF EXISTS Usuarios");

		// Se crea la nueva versión de la tabla
		db.execSQL(sqlCreate);
	}
}