package es.hkapps.eventus.view.wall;

import java.io.InputStream;
import java.util.ArrayList;

import es.hkapps.eventus.R;
import es.hkapps.eventus.model.PhotoEntry;
import es.hkapps.eventus.model.ProgramEntry;
import es.hkapps.eventus.model.WallEntry;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

public class WallAdapter extends BaseAdapter {

    private LayoutInflater layoutInflater;
    private ArrayList<WallEntry> feed;

    public WallAdapter(Activity activity, ArrayList<WallEntry> feed) {

        this.feed = feed;

        layoutInflater = (LayoutInflater) activity
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    }

    @Override
    public int getCount() {
        // Set the total list item count
        return feed.size();
    }

    @Override
    public WallEntry getItem(int position) {
        return feed.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        // Inflate the item layout and set the views
        View listItem = convertView;
        if (listItem == null) {
            listItem = layoutInflater.inflate(R.layout.wall_list_item, null);
        }

        
        
        ImageView photo = (ImageView) listItem.findViewById(R.id.wall_list_photo);
        TextView text = (TextView) listItem.findViewById(R.id.wall_list_text);


        WallEntry entry;
		if((entry = this.getItem(position)) instanceof PhotoEntry){
        	PhotoEntry pEntry = (PhotoEntry) entry;
        	AsyncTask<String, Void, Bitmap> task = new DownloadImageTask(photo)
        	.execute(pEntry.getPhoto());
		}else{
			
		}
        
        return listItem;
}

    
    protected class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {
        ImageView bmImage;

        public DownloadImageTask(ImageView bmImage) {
            this.bmImage = bmImage;
        }

        protected Bitmap doInBackground(String... urls) {
            String urldisplay = urls[0];
            Bitmap mIcon11 = null;
            try {
                InputStream in = new java.net.URL(urldisplay).openStream();
                mIcon11 = BitmapFactory.decodeStream(in);
            } catch (Exception e) {
                Log.e("Error", e.getMessage());
                e.printStackTrace();
            }
            return mIcon11;
        }

        protected void onPostExecute(Bitmap result) {
            bmImage.setImageBitmap(result);
        }
    }
}
}
