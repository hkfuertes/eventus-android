package es.hkapps.eventus.model;

import java.util.ArrayList;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class EventHelper extends SQLiteOpenHelper {
	
	/**
	 * private String name, place, date, type, admin;
	private String key;
	private ArrayList<String> participants;
	private ArrayList<ProgramEntry> program;
	 */

	private static String DB_NAME = "filename.db";
	private static String TABLE_NAME = "eventos";

	public static String TABLE_CREATE = "CREATE TABLE " + TABLE_NAME + " ("
			+ "key VARCHAR(100)  PRIMARY KEY,"
			+ "name VARCHAR(100)," + "place VARCHAR(100),"
			+ "date TIMESTAMP," + "type VARCHAR(125),"
			+ "admin VARCHAR(100)" + ");";

	private static String[] TABLE_FIELDS = { "key", "name", "place",
			"date", "type", "admin" };
	
	private static String TABLE_DROP = "DROP TABLE IF EXISTS " + TABLE_NAME + ";";

	public EventHelper(Context context) {
		super(context, DB_NAME, null, 1);
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		// Se ejecuta la sentencia SQL de creación de la tabla
		db.execSQL(TABLE_CREATE);
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int versionAnterior,
			int versionNueva) {

		// Se elimina la versión anterior de la tabla
		db.execSQL(TABLE_DROP);

		// Se crea la nueva versión de la tabla
		db.execSQL(TABLE_CREATE);
	}

	public void save(Event event) {
		if (this.retrieveEventByKey(event.getKey()) == null) {
			// No existe el usuario en la db, con lo que lo creo
			this.insertEvent(event);
		} else {
			// Existe, luego lo actualizo
			this.updateEvent(event);
		}
	}

	private void updateEvent(Event event) {
		// TODO Auto-generated method stub
		
	}

	private void insertEvent(Event event) {
		// TODO Auto-generated method stub
		
	}

	public void delete(Event event) {
		if (this.retrieveUserByUsername(event.getKey()) != null) {
			this.removeEvent(event);
		}
	}

	
	private void removeEvent(Event event) {
		// TODO Auto-generated method stub
		
	}
	
	public Event retrieveEventByKey(String key) {
		User user = null;
		SQLiteDatabase db = this.getReadableDatabase();

		String[] args = new String[] { key };

		Cursor c = db.query("Usuarios", TABLE_FIELDS, TABLE_FIELDS[0] + "=?",
				args, null, null, null);

		// Nos aseguramos de que existe al menos un registro
		if (c.moveToFirst()) {
			user = new User();
			user.setUsername(c.getString(4));
			user.setToken(c.getString(5));
			user.setNombre(c.getString(1));
			user.setApellidos(c.getString(2));
			user.setEmail(c.getString(3));

			user.setId(c.getInt(0));

			// Recorremos el cursor hasta que no haya más registros
			// do {
			// } while(c.moveToNext());
		}

		return user;
	}

	public User retrieveUserByUsername(String username) {
		User user = null;
		SQLiteDatabase db = this.getReadableDatabase();

		String[] args = new String[] { username };

		Cursor c = db.query("Usuarios", TABLE_FIELDS, TABLE_FIELDS[4] + "=?",
				args, null, null, null);

		// Nos aseguramos de que existe al menos un registro
		if (c.moveToFirst()) {
			user = new User();
			user.setUsername(c.getString(4));
			user.setToken(c.getString(5));
			user.setNombre(c.getString(1));
			user.setApellidos(c.getString(2));
			user.setEmail(c.getString(3));

			user.setId(c.getInt(0));

			// Recorremos el cursor hasta que no haya más registros
			// do {
			// } while(c.moveToNext());
		}

		return user;
	}

	private long insertUser(User user) {
		ContentValues newValues = new ContentValues();
		newValues.put("id", user.getId());
		newValues.put("username", user.getUsername());
		newValues.put("token", user.getToken());
		newValues.put("firstname", user.getNombre());
		newValues.put("lastname", user.getApellidos());
		newValues.put("email", user.getEmail());
		return this.getWritableDatabase().insert(TABLE_NAME, null, newValues);
	}

	private boolean removeUser(User user) {
		return this.getWritableDatabase().delete(TABLE_NAME,
				"id" + "=" + user.getId(), null) > 0;
	}

	private boolean updateUser(User user) {
		ContentValues newValues = new ContentValues();
		newValues.put("id", user.getId());
		newValues.put("username", user.getUsername());
		newValues.put("token", user.getToken());
		newValues.put("firstname", user.getNombre());
		newValues.put("lastname", user.getApellidos());
		newValues.put("email", user.getEmail());
		return this.getWritableDatabase().update(TABLE_NAME, newValues,
				"id" + "=" + user.getId(), null) > 0;
	}

}